// <auto-generated />
using EFCore.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFCore.Migrations
{
    [DbContext(typeof(DataDBContext))]
    [Migration("20200315020410_City")]
    partial class City
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("EFCore.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area")
                        .HasMaxLength(256);

                    b.Property<string>("City")
                        .HasMaxLength(256);

                    b.Property<string>("Province")
                        .HasMaxLength(256);

                    b.Property<string>("Street")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasAnnotation("MySQL:Charset", "utf8mb4");

                    b.HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");
                });

            modelBuilder.Entity("EFCore.Model.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProvinceID");

                    b.Property<string>("areaCode");

                    b.Property<string>("name");

                    b.HasKey("ID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("EFCore.Model.OrderInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddressId")
                        .HasColumnName("address_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("PassengerId")
                        .HasColumnName("passenger_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Price")
                        .HasColumnName("price")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.ToTable("OrderInfos");

                    b.HasAnnotation("MySQL:Charset", "utf8mb4");

                    b.HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");
                });

            modelBuilder.Entity("EFCore.Model.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10)");

                    b.Property<int>("PassengerId")
                        .HasColumnName("passengerid")
                        .HasColumnType("int(11)");

                    b.Property<string>("PassengerName");

                    b.HasKey("Id");

                    b.ToTable("Passengers");

                    b.HasAnnotation("MySQL:Charset", "utf8mb4");

                    b.HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");
                });

            modelBuilder.Entity("EFCore.Model.Province", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name");

                    b.Property<int>("population");

                    b.HasKey("ID");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("EFCore.Model.City", b =>
                {
                    b.HasOne("EFCore.Model.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EFCore.Model.OrderInfo", b =>
                {
                    b.HasOne("EFCore.Model.Passenger", "OrderForPassenger")
                        .WithMany("OrderInfos")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
